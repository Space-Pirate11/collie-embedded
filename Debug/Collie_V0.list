
Collie_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c54  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004e88  08004e88  00005e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  2000000c  08004f30  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08004f30  000064ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfc6  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328b  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00026298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  00027738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fcd5  00000000  00000000  0002872c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b67  00000000  00000000  00058401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001308cf  00000000  00000000  00071f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a2837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  001a287c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001a822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08004e70 	.word	0x08004e70

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08004e70 	.word	0x08004e70

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b9b0 	b.w	80005ec <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002aa:	4688      	mov	r8, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	468e      	mov	lr, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d95f      	bls.n	800037a <__udivmoddi4+0xd6>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	40b4      	lsls	r4, r6
 80002cc:	fa20 f303 	lsr.w	r3, r0, r3
 80002d0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fbbe f1f8 	udiv	r1, lr, r8
 80002e2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x5e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x5c>
 80002fa:	429a      	cmp	r2, r3
 80002fc:	f200 8154 	bhi.w	80005a8 <__udivmoddi4+0x304>
 8000300:	4601      	mov	r1, r0
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	b2a2      	uxth	r2, r4
 8000306:	fbb3 f0f8 	udiv	r0, r3, r8
 800030a:	fb08 3310 	mls	r3, r8, r0, r3
 800030e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000312:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000316:	4594      	cmp	ip, r2
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031a:	18ba      	adds	r2, r7, r2
 800031c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000320:	bf2c      	ite	cs
 8000322:	2401      	movcs	r4, #1
 8000324:	2400      	movcc	r4, #0
 8000326:	4594      	cmp	ip, r2
 8000328:	d902      	bls.n	8000330 <__udivmoddi4+0x8c>
 800032a:	2c00      	cmp	r4, #0
 800032c:	f000 813f 	beq.w	80005ae <__udivmoddi4+0x30a>
 8000330:	4618      	mov	r0, r3
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba2 020c 	sub.w	r2, r2, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f2      	lsrs	r2, r6
 8000340:	2300      	movs	r3, #0
 8000342:	e9c5 2300 	strd	r2, r3, [r5]
 8000346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d14e      	bne.n	8000400 <__udivmoddi4+0x15c>
 8000362:	4543      	cmp	r3, r8
 8000364:	f0c0 8112 	bcc.w	800058c <__udivmoddi4+0x2e8>
 8000368:	4282      	cmp	r2, r0
 800036a:	f240 810f 	bls.w	800058c <__udivmoddi4+0x2e8>
 800036e:	4608      	mov	r0, r1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e8      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000374:	e9c5 4e00 	strd	r4, lr, [r5]
 8000378:	e7e5      	b.n	8000346 <__udivmoddi4+0xa2>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f000 80ac 	beq.w	80004d8 <__udivmoddi4+0x234>
 8000380:	fab2 f682 	clz	r6, r2
 8000384:	2e00      	cmp	r6, #0
 8000386:	f040 80bb 	bne.w	8000500 <__udivmoddi4+0x25c>
 800038a:	1a8b      	subs	r3, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b2bc      	uxth	r4, r7
 8000392:	2101      	movs	r1, #1
 8000394:	0c02      	lsrs	r2, r0, #16
 8000396:	b280      	uxth	r0, r0
 8000398:	fbb3 fcfe 	udiv	ip, r3, lr
 800039c:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a4:	fb04 f20c 	mul.w	r2, r4, ip
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d90e      	bls.n	80003ca <__udivmoddi4+0x126>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	429a      	cmp	r2, r3
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80ec 	beq.w	80005a0 <__udivmoddi4+0x2fc>
 80003c8:	46c4      	mov	ip, r8
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d4:	fb04 f408 	mul.w	r4, r4, r8
 80003d8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003dc:	4294      	cmp	r4, r2
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x154>
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003e6:	bf2c      	ite	cs
 80003e8:	2001      	movcs	r0, #1
 80003ea:	2000      	movcc	r0, #0
 80003ec:	4294      	cmp	r4, r2
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x152>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	f000 80d1 	beq.w	8000598 <__udivmoddi4+0x2f4>
 80003f6:	4698      	mov	r8, r3
 80003f8:	1b12      	subs	r2, r2, r4
 80003fa:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003fe:	e79d      	b.n	800033c <__udivmoddi4+0x98>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa08 f401 	lsl.w	r4, r8, r1
 800040a:	fa00 f901 	lsl.w	r9, r0, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa28 f806 	lsr.w	r8, r8, r6
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f306 	lsr.w	r3, r0, r6
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	4323      	orrs	r3, r4
 8000422:	fa1f fc87 	uxth.w	ip, r7
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fbb8 fef0 	udiv	lr, r8, r0
 800042c:	fb00 881e 	mls	r8, r0, lr, r8
 8000430:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000434:	fb0e f80c 	mul.w	r8, lr, ip
 8000438:	45a0      	cmp	r8, r4
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a0      	cmp	r8, r4
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 80b8 	beq.w	80005c8 <__udivmoddi4+0x324>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba4 0408 	sub.w	r4, r4, r8
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	fbb4 f3f0 	udiv	r3, r4, r0
 8000466:	fb00 4413 	mls	r4, r0, r3, r4
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000472:	45a4      	cmp	ip, r4
 8000474:	d90e      	bls.n	8000494 <__udivmoddi4+0x1f0>
 8000476:	193c      	adds	r4, r7, r4
 8000478:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800047c:	bf2c      	ite	cs
 800047e:	f04f 0801 	movcs.w	r8, #1
 8000482:	f04f 0800 	movcc.w	r8, #0
 8000486:	45a4      	cmp	ip, r4
 8000488:	d903      	bls.n	8000492 <__udivmoddi4+0x1ee>
 800048a:	f1b8 0f00 	cmp.w	r8, #0
 800048e:	f000 809f 	beq.w	80005d0 <__udivmoddi4+0x32c>
 8000492:	4603      	mov	r3, r0
 8000494:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000498:	eba4 040c 	sub.w	r4, r4, ip
 800049c:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a0:	4564      	cmp	r4, ip
 80004a2:	4673      	mov	r3, lr
 80004a4:	46e0      	mov	r8, ip
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x20a>
 80004a8:	d107      	bne.n	80004ba <__udivmoddi4+0x216>
 80004aa:	45f1      	cmp	r9, lr
 80004ac:	d205      	bcs.n	80004ba <__udivmoddi4+0x216>
 80004ae:	ebbe 0302 	subs.w	r3, lr, r2
 80004b2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	46e0      	mov	r8, ip
 80004ba:	b15d      	cbz	r5, 80004d4 <__udivmoddi4+0x230>
 80004bc:	ebb9 0203 	subs.w	r2, r9, r3
 80004c0:	eb64 0408 	sbc.w	r4, r4, r8
 80004c4:	fa04 f606 	lsl.w	r6, r4, r6
 80004c8:	fa22 f301 	lsr.w	r3, r2, r1
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	431e      	orrs	r6, r3
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e736      	b.n	8000346 <__udivmoddi4+0xa2>
 80004d8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004dc:	0c01      	lsrs	r1, r0, #16
 80004de:	4614      	mov	r4, r2
 80004e0:	b280      	uxth	r0, r0
 80004e2:	4696      	mov	lr, r2
 80004e4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004e8:	2620      	movs	r6, #32
 80004ea:	4690      	mov	r8, r2
 80004ec:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f0:	4610      	mov	r0, r2
 80004f2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004f6:	eba3 0308 	sub.w	r3, r3, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e74b      	b.n	8000398 <__udivmoddi4+0xf4>
 8000500:	40b7      	lsls	r7, r6
 8000502:	f1c6 0320 	rsb	r3, r6, #32
 8000506:	fa01 f206 	lsl.w	r2, r1, r6
 800050a:	fa21 f803 	lsr.w	r8, r1, r3
 800050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000512:	fa20 f303 	lsr.w	r3, r0, r3
 8000516:	b2bc      	uxth	r4, r7
 8000518:	40b0      	lsls	r0, r6
 800051a:	4313      	orrs	r3, r2
 800051c:	0c02      	lsrs	r2, r0, #16
 800051e:	0c19      	lsrs	r1, r3, #16
 8000520:	b280      	uxth	r0, r0
 8000522:	fbb8 f9fe 	udiv	r9, r8, lr
 8000526:	fb0e 8819 	mls	r8, lr, r9, r8
 800052a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	4588      	cmp	r8, r1
 8000534:	d951      	bls.n	80005da <__udivmoddi4+0x336>
 8000536:	1879      	adds	r1, r7, r1
 8000538:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800053c:	bf2c      	ite	cs
 800053e:	f04f 0a01 	movcs.w	sl, #1
 8000542:	f04f 0a00 	movcc.w	sl, #0
 8000546:	4588      	cmp	r8, r1
 8000548:	d902      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800054a:	f1ba 0f00 	cmp.w	sl, #0
 800054e:	d031      	beq.n	80005b4 <__udivmoddi4+0x310>
 8000550:	eba1 0108 	sub.w	r1, r1, r8
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000560:	b29b      	uxth	r3, r3
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	4543      	cmp	r3, r8
 8000568:	d235      	bcs.n	80005d6 <__udivmoddi4+0x332>
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000570:	bf2c      	ite	cs
 8000572:	f04f 0a01 	movcs.w	sl, #1
 8000576:	f04f 0a00 	movcc.w	sl, #0
 800057a:	4543      	cmp	r3, r8
 800057c:	d2bb      	bcs.n	80004f6 <__udivmoddi4+0x252>
 800057e:	f1ba 0f00 	cmp.w	sl, #0
 8000582:	d1b8      	bne.n	80004f6 <__udivmoddi4+0x252>
 8000584:	f1a9 0102 	sub.w	r1, r9, #2
 8000588:	443b      	add	r3, r7
 800058a:	e7b4      	b.n	80004f6 <__udivmoddi4+0x252>
 800058c:	1a84      	subs	r4, r0, r2
 800058e:	eb68 0203 	sbc.w	r2, r8, r3
 8000592:	2001      	movs	r0, #1
 8000594:	4696      	mov	lr, r2
 8000596:	e6eb      	b.n	8000370 <__udivmoddi4+0xcc>
 8000598:	443a      	add	r2, r7
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	e72b      	b.n	80003f8 <__udivmoddi4+0x154>
 80005a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a4:	443b      	add	r3, r7
 80005a6:	e710      	b.n	80003ca <__udivmoddi4+0x126>
 80005a8:	3902      	subs	r1, #2
 80005aa:	443b      	add	r3, r7
 80005ac:	e6a9      	b.n	8000302 <__udivmoddi4+0x5e>
 80005ae:	443a      	add	r2, r7
 80005b0:	3802      	subs	r0, #2
 80005b2:	e6be      	b.n	8000332 <__udivmoddi4+0x8e>
 80005b4:	eba7 0808 	sub.w	r8, r7, r8
 80005b8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005bc:	4441      	add	r1, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c9      	b.n	800055c <__udivmoddi4+0x2b8>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	e744      	b.n	800045a <__udivmoddi4+0x1b6>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	443c      	add	r4, r7
 80005d4:	e75e      	b.n	8000494 <__udivmoddi4+0x1f0>
 80005d6:	4649      	mov	r1, r9
 80005d8:	e78d      	b.n	80004f6 <__udivmoddi4+0x252>
 80005da:	eba1 0108 	sub.w	r1, r1, r8
 80005de:	46cc      	mov	ip, r9
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7b8      	b.n	800055c <__udivmoddi4+0x2b8>
 80005ea:	bf00      	nop

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fd38 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f80e 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f9de 	bl	80009bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000600:	f000 f852 	bl	80006a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000604:	f000 f8ac 	bl	8000760 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000608:	f000 f8ea 	bl	80007e0 <MX_SPI1_Init>
  MX_UART4_Init();
 800060c:	f000 f956 	bl	80008bc <MX_UART4_Init>
  MX_USB_PCD_Init();
 8000610:	f000 f9a2 	bl	8000958 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x24>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2238      	movs	r2, #56	@ 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fbf5 	bl	8004e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800063c:	2002      	movs	r0, #2
 800063e:	f002 f885 	bl	800274c <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 fa52 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSIS;
 800064c:	2320      	movs	r3, #32
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV8;
 8000658:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f8d0 	bl	8002808 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800066e:	f000 fa3f 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	231f      	movs	r3, #31
 8000674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fc10 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800069a:	f000 fa29 	bl	8000af0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2220      	movs	r2, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fbae 	bl	8004e16 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <MX_ADC1_Init+0xb4>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_ADC1_Init+0xb0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_ADC1_Init+0xb0>)
 8000704:	2200      	movs	r2, #0
 8000706:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_ADC1_Init+0xb0>)
 800070a:	2200      	movs	r2, #0
 800070c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_ADC1_Init+0xb0>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4810      	ldr	r0, [pc, #64]	@ (8000758 <MX_ADC1_Init+0xb0>)
 8000718:	f001 f828 	bl	800176c <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000722:	f000 f9e5 	bl	8000af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000726:	2305      	movs	r3, #5
 8000728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072a:	2306      	movs	r3, #6
 800072c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_ADC1_Init+0xb0>)
 8000740:	f001 f962 	bl	8001a08 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800074a:	f000 f9d1 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000028 	.word	0x20000028
 800075c:	42028000 	.word	0x42028000

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <MX_I2C1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_I2C1_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <MX_I2C1_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <MX_I2C1_Init+0x74>)
 800079c:	f001 fdb0 	bl	8002300 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f9a3 	bl	8000af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <MX_I2C1_Init+0x74>)
 80007ae:	f001 fe42 	bl	8002436 <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f99a 	bl	8000af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_I2C1_Init+0x74>)
 80007c0:	f001 fe84 	bl	80024cc <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f991 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000090 	.word	0x20000090
 80007d8:	40005400 	.word	0x40005400
 80007dc:	40000a0b 	.word	0x40000a0b

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f0:	4b30      	ldr	r3, [pc, #192]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 80007f2:	4a31      	ldr	r2, [pc, #196]	@ (80008b8 <MX_SPI1_Init+0xd8>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 80007f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000806:	2203      	movs	r2, #3
 8000808:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000818:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800081c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000838:	2207      	movs	r2, #7
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000846:	2200      	movs	r2, #0
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800084c:	2200      	movs	r2, #0
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000852:	2200      	movs	r2, #0
 8000854:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000858:	2200      	movs	r2, #0
 800085a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800085e:	2200      	movs	r2, #0
 8000860:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000864:	2200      	movs	r2, #0
 8000866:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800086a:	2200      	movs	r2, #0
 800086c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000870:	2200      	movs	r2, #0
 8000872:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 8000876:	2200      	movs	r2, #0
 8000878:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800087c:	f003 fc22 	bl	80040c4 <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000886:	f000 f933 	bl	8000af0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800088e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000892:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_SPI1_Init+0xd4>)
 800089e:	f003 fd1c 	bl	80042da <HAL_SPIEx_SetConfigAutonomousMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80008a8:	f000 f922 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000e4 	.word	0x200000e4
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_UART4_Init+0x94>)
 80008c2:	4a24      	ldr	r2, [pc, #144]	@ (8000954 <MX_UART4_Init+0x98>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_UART4_Init+0x94>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_UART4_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_UART4_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_UART4_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_UART4_Init+0x94>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_UART4_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_UART4_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_UART4_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_UART4_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_UART4_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <MX_UART4_Init+0x94>)
 800090a:	f003 fd27 	bl	800435c <HAL_MultiProcessor_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f8ec 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_UART4_Init+0x94>)
 800091c:	f004 f956 	bl	8004bcc <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8e3 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <MX_UART4_Init+0x94>)
 800092e:	f004 f98b 	bl	8004c48 <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8000938:	f000 f8da 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_UART4_Init+0x94>)
 800093e:	f004 f90c 	bl	8004b5a <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8000948:	f000 f8d2 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000174 	.word	0x20000174
 8000954:	40004c00 	.word	0x40004c00

08000958 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <MX_USB_PCD_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000964:	2208      	movs	r2, #8
 8000966:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 800096a:	2202      	movs	r2, #2
 800096c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000970:	2202      	movs	r2, #2
 8000972:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_USB_PCD_Init+0x5c>)
 80009a0:	f001 fde0 	bl	8002564 <HAL_PCD_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 f8a1 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000208 	.word	0x20000208
 80009b8:	40016000 	.word	0x40016000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b43      	ldr	r3, [pc, #268]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 80009d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d8:	4a41      	ldr	r2, [pc, #260]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 80009da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009e2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 80009e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 80009f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a00:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 8000a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 8000a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a14:	4a32      	ldr	r2, [pc, #200]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <MX_GPIO_Init+0x124>)
 8000a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	482c      	ldr	r0, [pc, #176]	@ (8000ae4 <MX_GPIO_Init+0x128>)
 8000a32:	f001 fc4d 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f248 0118 	movw	r1, #32792	@ 0x8018
 8000a3c:	482a      	ldr	r0, [pc, #168]	@ (8000ae8 <MX_GPIO_Init+0x12c>)
 8000a3e:	f001 fc47 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000a48:	4828      	ldr	r0, [pc, #160]	@ (8000aec <MX_GPIO_Init+0x130>)
 8000a4a:	f001 fc41 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4820      	ldr	r0, [pc, #128]	@ (8000ae4 <MX_GPIO_Init+0x128>)
 8000a62:	f001 faab 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <MX_GPIO_Init+0x128>)
 8000a7e:	f001 fa9d 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_15;
 8000a82:	f248 0318 	movw	r3, #32792	@ 0x8018
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <MX_GPIO_Init+0x12c>)
 8000a9c:	f001 fa8e 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000aa0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_GPIO_Init+0x130>)
 8000aba:	f001 fa7f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000abe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_GPIO_Init+0x130>)
 8000ad4:	f001 fa72 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40030c00 	.word	0x40030c00
 8000ae4:	42021c00 	.word	0x42021c00
 8000ae8:	42020000 	.word	0x42020000
 8000aec:	42020400 	.word	0x42020400

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_MspInit+0x30>)
 8000b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b08:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_MspInit+0x30>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_MspInit+0x30>)
 8000b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000b20:	f001 fe62 	bl	80027e8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40030c00 	.word	0x40030c00

08000b30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0a8      	sub	sp, #160	@ 0xa0
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2278      	movs	r2, #120	@ 0x78
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f960 	bl	8004e16 <memset>
  if(hadc->Instance==ADC1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	@ (8000be4 <HAL_ADC_MspInit+0xb4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d13d      	bne.n	8000bdc <HAL_ADC_MspInit+0xac>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000b60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fb5e 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000b7e:	f7ff ffb7 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b88:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba6:	4a10      	ldr	r2, [pc, #64]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_ADC_MspInit+0xb8>)
 8000bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_ADC_MspInit+0xbc>)
 8000bd8:	f001 f9f0 	bl	8001fbc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bdc:	bf00      	nop
 8000bde:	37a0      	adds	r7, #160	@ 0xa0
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	42028000 	.word	0x42028000
 8000be8:	40030c00 	.word	0x40030c00
 8000bec:	42020000 	.word	0x42020000

08000bf0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0a8      	sub	sp, #160	@ 0xa0
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2278      	movs	r2, #120	@ 0x78
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 f900 	bl	8004e16 <memset>
  if(hi2c->Instance==I2C1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <HAL_I2C_MspInit+0xbc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d140      	bne.n	8000ca2 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c20:	2320      	movs	r3, #32
 8000c22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fb01 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c38:	f7ff ff5a 	bl	8000af0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c42:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	23c0      	movs	r3, #192	@ 0xc0
 8000c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <HAL_I2C_MspInit+0xc4>)
 8000c80:	f001 f99c 	bl	8001fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_I2C_MspInit+0xc0>)
 8000c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	37a0      	adds	r7, #160	@ 0xa0
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40030c00 	.word	0x40030c00
 8000cb4:	42020400 	.word	0x42020400

08000cb8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0a8      	sub	sp, #160	@ 0xa0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2278      	movs	r2, #120	@ 0x78
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 f89c 	bl	8004e16 <memset>
  if(hspi->Instance==SPI1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a24      	ldr	r2, [pc, #144]	@ (8000d74 <HAL_SPI_MspInit+0xbc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d141      	bne.n	8000d6c <HAL_SPI_MspInit+0xb4>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fa9c 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000d02:	f7ff fef5 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d12:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_SPI_MspInit+0xc0>)
 8000d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d42:	23e0      	movs	r3, #224	@ 0xe0
 8000d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_SPI_MspInit+0xc4>)
 8000d68:	f001 f928 	bl	8001fbc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37a0      	adds	r7, #160	@ 0xa0
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40030c00 	.word	0x40030c00
 8000d7c:	42020000 	.word	0x42020000

08000d80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0a8      	sub	sp, #160	@ 0xa0
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2278      	movs	r2, #120	@ 0x78
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 f838 	bl	8004e16 <memset>
  if(huart->Instance==UART4)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a24      	ldr	r2, [pc, #144]	@ (8000e3c <HAL_UART_MspInit+0xbc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d140      	bne.n	8000e32 <HAL_UART_MspInit+0xb2>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fa39 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dc8:	f7ff fe92 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dd8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000de2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df0:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_UART_MspInit+0xc0>)
 8000dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e20:	2308      	movs	r3, #8
 8000e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_UART_MspInit+0xc4>)
 8000e2e:	f001 f8c5 	bl	8001fbc <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	37a0      	adds	r7, #160	@ 0xa0
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004c00 	.word	0x40004c00
 8000e40:	40030c00 	.word	0x40030c00
 8000e44:	42020000 	.word	0x42020000

08000e48 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0a2      	sub	sp, #136	@ 0x88
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	2278      	movs	r2, #120	@ 0x78
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 ffdc 	bl	8004e16 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <HAL_PCD_MspInit+0x70>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d122      	bne.n	8000eae <HAL_PCD_MspInit+0x66>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ICLK|RCC_PERIPHCLK_USB1;
 8000e68:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.IclkClockSelection = RCC_ICLKCLKSOURCE_SYSCLK;
 8000e6e:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Usb1ClockSelection = RCC_USB1CLKSOURCE_ICLK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f9d9 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_PCD_MspInit+0x44>
    {
      Error_Handler();
 8000e88:	f7ff fe32 	bl	8000af0 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8000e8c:	f001 fc9c 	bl	80027c8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB1_CLK_ENABLE();
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_PCD_MspInit+0x74>)
 8000e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e96:	4a09      	ldr	r2, [pc, #36]	@ (8000ebc <HAL_PCD_MspInit+0x74>)
 8000e98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e9c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_PCD_MspInit+0x74>)
 8000ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000eae:	bf00      	nop
 8000eb0:	3788      	adds	r7, #136	@ 0x88
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40016000 	.word	0x40016000
 8000ebc:	40030c00 	.word	0x40030c00

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 f945 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <SystemCoreClockUpdate+0xb8>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d034      	beq.n	8000fc0 <SystemCoreClockUpdate+0x7c>
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d836      	bhi.n	8000fc8 <SystemCoreClockUpdate+0x84>
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <SystemCoreClockUpdate+0x20>
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d02a      	beq.n	8000fb8 <SystemCoreClockUpdate+0x74>
 8000f62:	e031      	b.n	8000fc8 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8000f64:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <SystemCoreClockUpdate+0xb8>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00f      	beq.n	8000f94 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da03      	bge.n	8000f82 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <SystemCoreClockUpdate+0xc0>)
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e002      	b.n	8000f88 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <SystemCoreClockUpdate+0xc4>)
 8000f86:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	0f5b      	lsrs	r3, r3, #29
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	e009      	b.n	8000fa8 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000f96:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <SystemCoreClockUpdate+0xc0>)
 8000f98:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <SystemCoreClockUpdate+0xb8>)
 8000f9c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000fa0:	0b1b      	lsrs	r3, r3, #12
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	4a13      	ldr	r2, [pc, #76]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fb4:	6013      	str	r3, [r2, #0]
    break;
 8000fb6:	e00c      	b.n	8000fd2 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fba:	4a14      	ldr	r2, [pc, #80]	@ (800100c <SystemCoreClockUpdate+0xc8>)
 8000fbc:	601a      	str	r2, [r3, #0]
    break;
 8000fbe:	e008      	b.n	8000fd2 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <SystemCoreClockUpdate+0xc8>)
 8000fc4:	601a      	str	r2, [r3, #0]
    break;
 8000fc6:	e004      	b.n	8000fd2 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fce:	601a      	str	r2, [r3, #0]
    break;
 8000fd0:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <SystemCoreClockUpdate+0xb8>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <SystemCoreClockUpdate+0xcc>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <SystemCoreClockUpdate+0xbc>)
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40030c00 	.word	0x40030c00
 8001000:	20000000 	.word	0x20000000
 8001004:	016e3600 	.word	0x016e3600
 8001008:	05b8d800 	.word	0x05b8d800
 800100c:	00f42400 	.word	0x00f42400
 8001010:	08004e88 	.word	0x08004e88

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff ff82 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800101c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800101e:	e003      	b.n	8001028 <LoopCopyDataInit>

08001020 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001022:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001024:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001026:	3104      	adds	r1, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <LoopForever+0xa>)
	ldr	r3, =_edata
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <LoopForever+0xe>)
	adds	r2, r0, r1
 800102c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800102e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001030:	d3f6      	bcc.n	8001020 <CopyDataInit>
	ldr	r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001034:	e002      	b.n	800103c <LoopFillZerobss>

08001036 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001036:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001038:	f842 3b04 	str.w	r3, [r2], #4

0800103c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <LoopForever+0x16>)
	cmp	r2, r3
 800103e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001040:	d3f9      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f003 fef1 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fad3 	bl	80005f0 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800104c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001050:	08004f24 	.word	0x08004f24
	ldr	r0, =_sdata
 8001054:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001058:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800105c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001060:	200004ec 	.word	0x200004ec

08001064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_IRQHandler>
	...

08001068 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <HAL_Init+0x3c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <HAL_Init+0x3c>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 ff00 	bl	8001e7e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 800107e:	f7ff ff61 	bl	8000f44 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001082:	2004      	movs	r0, #4
 8001084:	f000 ff42 	bl	8001f0c <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001088:	200f      	movs	r0, #15
 800108a:	f000 f80d 	bl	80010a8 <HAL_InitTick>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e002      	b.n	800109e <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fd30 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_InitTick+0xe8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e062      	b.n	8001186 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <HAL_InitTick+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d10c      	bne.n	80010e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80010cc:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <HAL_InitTick+0xf0>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <HAL_InitTick+0xe8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e03d      	b.n	8001162 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_InitTick+0xf4>)
 80010e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80010ec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80010f0:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010f8:	d025      	beq.n	8001146 <HAL_InitTick+0x9e>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001100:	d82e      	bhi.n	8001160 <HAL_InitTick+0xb8>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_InitTick+0x6a>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800110e:	d00d      	beq.n	800112c <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8001110:	e026      	b.n	8001160 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_InitTick+0xf0>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_InitTick+0xe8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001120:	fbb3 f3f1 	udiv	r3, r3, r1
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	60fb      	str	r3, [r7, #12]
        break;
 800112a:	e01a      	b.n	8001162 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_InitTick+0xe8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f2 	udiv	r3, r3, r2
 800113a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	60fb      	str	r3, [r7, #12]
        break;
 8001144:	e00d      	b.n	8001162 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0xe8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001150:	fbb3 f3f2 	udiv	r3, r3, r2
 8001154:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
        break;
 800115e:	e000      	b.n	8001162 <HAL_InitTick+0xba>
        break;
 8001160:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 feb0 	bl	8001ec8 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e009      	b.n	8001186 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800117a:	f000 fe8b 	bl	8001e94 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_InitTick+0xf8>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	e000e010 	.word	0xe000e010
 8001198:	20000000 	.word	0x20000000
 800119c:	40030c00 	.word	0x40030c00
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	200004e8 	.word	0x200004e8

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200004e8 	.word	0x200004e8

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_VDDCOREEN, (PathInternal >> ADC_PATH_INTERNAL_POS));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800127e:	f023 0201 	bic.w	r2, r3, #1
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_VDDCOREEN)) << ADC_PATH_INTERNAL_POS;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_SetOffsetChannel>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3350      	adds	r3, #80	@ 0x50
 80012ca:	461a      	mov	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	06db      	lsls	r3, r3, #27
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3350      	adds	r3, #80	@ 0x50
 8001300:	461a      	mov	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	0edb      	lsrs	r3, r3, #27
 8001310:	f003 031f 	and.w	r3, r3, #31
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3360      	adds	r3, #96	@ 0x60
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0d9b      	lsrs	r3, r3, #22
 8001340:	059b      	lsls	r3, r3, #22
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001356:	b480      	push	{r7}
 8001358:	b087      	sub	sp, #28
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3350      	adds	r3, #80	@ 0x50
 8001366:	461a      	mov	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3350      	adds	r3, #80	@ 0x50
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b087      	sub	sp, #28
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3350      	adds	r3, #80	@ 0x50
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001406:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800140a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	2a00      	cmp	r2, #0
 8001422:	d002      	beq.n	800142a <LL_ADC_SetGainCompensation+0x32>
 8001424:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001428:	e000      	b.n	800142c <LL_ADC_SetGainCompensation+0x34>
 800142a:	2200      	movs	r2, #0
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_REG_SetSequencerRanks>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800143e:	b480      	push	{r7}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3330      	adds	r3, #48	@ 0x30
 800144e:	461a      	mov	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	211f      	movs	r1, #31
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f003 011f 	and.w	r1, r3, #31
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_SetChannelPreselection>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d07f      	beq.n	80015da <LL_ADC_SetChannelSamplingTime+0x116>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d078      	beq.n	80015d6 <LL_ADC_SetChannelSamplingTime+0x112>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d071      	beq.n	80015d2 <LL_ADC_SetChannelSamplingTime+0x10e>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d06a      	beq.n	80015ce <LL_ADC_SetChannelSamplingTime+0x10a>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d063      	beq.n	80015ca <LL_ADC_SetChannelSamplingTime+0x106>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2b05      	cmp	r3, #5
 800150a:	d05c      	beq.n	80015c6 <LL_ADC_SetChannelSamplingTime+0x102>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b06      	cmp	r3, #6
 8001514:	d055      	beq.n	80015c2 <LL_ADC_SetChannelSamplingTime+0xfe>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	2b07      	cmp	r3, #7
 800151e:	d04e      	beq.n	80015be <LL_ADC_SetChannelSamplingTime+0xfa>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	2b08      	cmp	r3, #8
 8001528:	d047      	beq.n	80015ba <LL_ADC_SetChannelSamplingTime+0xf6>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b09      	cmp	r3, #9
 8001532:	d040      	beq.n	80015b6 <LL_ADC_SetChannelSamplingTime+0xf2>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2b0a      	cmp	r3, #10
 800153c:	d039      	beq.n	80015b2 <LL_ADC_SetChannelSamplingTime+0xee>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	2b0b      	cmp	r3, #11
 8001546:	d032      	beq.n	80015ae <LL_ADC_SetChannelSamplingTime+0xea>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d02b      	beq.n	80015aa <LL_ADC_SetChannelSamplingTime+0xe6>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	2b0d      	cmp	r3, #13
 800155a:	d024      	beq.n	80015a6 <LL_ADC_SetChannelSamplingTime+0xe2>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2b0e      	cmp	r3, #14
 8001564:	d01d      	beq.n	80015a2 <LL_ADC_SetChannelSamplingTime+0xde>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d016      	beq.n	800159e <LL_ADC_SetChannelSamplingTime+0xda>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2b10      	cmp	r3, #16
 8001578:	d00f      	beq.n	800159a <LL_ADC_SetChannelSamplingTime+0xd6>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2b11      	cmp	r3, #17
 8001582:	d008      	beq.n	8001596 <LL_ADC_SetChannelSamplingTime+0xd2>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b12      	cmp	r3, #18
 800158c:	d101      	bne.n	8001592 <LL_ADC_SetChannelSamplingTime+0xce>
 800158e:	2312      	movs	r3, #18
 8001590:	e024      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 8001592:	2300      	movs	r3, #0
 8001594:	e022      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 8001596:	2311      	movs	r3, #17
 8001598:	e020      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 800159a:	2310      	movs	r3, #16
 800159c:	e01e      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 800159e:	230f      	movs	r3, #15
 80015a0:	e01c      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015a2:	230e      	movs	r3, #14
 80015a4:	e01a      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015a6:	230d      	movs	r3, #13
 80015a8:	e018      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015aa:	230c      	movs	r3, #12
 80015ac:	e016      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015ae:	230b      	movs	r3, #11
 80015b0:	e014      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015b2:	230a      	movs	r3, #10
 80015b4:	e012      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015b6:	2309      	movs	r3, #9
 80015b8:	e010      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015ba:	2308      	movs	r3, #8
 80015bc:	e00e      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00c      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015c2:	2306      	movs	r3, #6
 80015c4:	e00a      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e008      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e006      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_SetChannelSamplingTime+0x118>
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3314      	adds	r3, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4a15      	ldr	r2, [pc, #84]	@ (800163c <LL_ADC_SetChannelSamplingTime+0x178>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ec:	0e5b      	lsrs	r3, r3, #25
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	440b      	add	r3, r1
 80015f6:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	490f      	ldr	r1, [pc, #60]	@ (800163c <LL_ADC_SetChannelSamplingTime+0x178>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001604:	0d1b      	lsrs	r3, r3, #20
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2107      	movs	r1, #7
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	4909      	ldr	r1, [pc, #36]	@ (800163c <LL_ADC_SetChannelSamplingTime+0x178>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800161c:	0d1b      	lsrs	r3, r3, #20
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	08004ea0 	.word	0x08004ea0

08001640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6093      	str	r3, [r2, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800169c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b08      	cmp	r3, #8
 8001714:	d101      	bne.n	800171a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_LDORDY) == (ADC_ISR_LDORDY)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800173c:	d101      	bne.n	8001742 <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e139      	b.n	80019f6 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff f9cd 	bl	8000b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5b 	bl	8001664 <LL_ADC_IsDeepPowerDownEnabled>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Init+0x52>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff41 	bl	8001640 <LL_ADC_DisableDeepPowerDown>

    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff76 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d132      	bne.n	8001834 <HAL_ADC_Init+0xc8>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffbc 	bl	8001750 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff55 	bl	800168c <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e2:	f7ff fcf3 	bl	80011cc <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 80017e8:	e01c      	b.n	8001824 <HAL_ADC_Init+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 80017ea:	f7ff fcef 	bl	80011cc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d915      	bls.n	8001824 <HAL_ADC_Init+0xb8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff93 	bl	8001728 <LL_ADC_IsActiveFlag_LDORDY>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10d      	bne.n	8001824 <HAL_ADC_Init+0xb8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0e8      	b.n	80019f6 <HAL_ADC_Init+0x28a>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff7d 	bl	8001728 <LL_ADC_IsActiveFlag_LDORDY>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0da      	beq.n	80017ea <HAL_ADC_Init+0x7e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff4f 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 800183e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 80cb 	bne.w	80019e4 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 80c7 	bne.w	80019e4 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800185e:	f043 0202 	orr.w	r2, r3, #2
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7d5b      	ldrb	r3, [r3, #21]
 800186a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001870:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
 8001876:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7f1b      	ldrb	r3, [r3, #28]
 800187c:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7f1b      	ldrb	r3, [r3, #28]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <HAL_ADC_Init+0x12c>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	3b01      	subs	r3, #1
 8001890:	045b      	lsls	r3, r3, #17
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_ADC_Init+0x148>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b51      	ldr	r3, [pc, #324]	@ (8001a00 <HAL_ADC_Init+0x294>)
 80018bc:	4013      	ands	r3, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fefa 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 80018e8:	60f8      	str	r0, [r7, #12]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff07 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 80018f4:	60b8      	str	r0, [r7, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d151      	bne.n	80019a0 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d14e      	bne.n	80019a0 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7d1b      	ldrb	r3, [r3, #20]
 8001906:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff fd60 	bl	80013f8 <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d11b      	bne.n	800197a <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <HAL_ADC_Init+0x298>)
 8001950:	4013      	ands	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001956:	3a01      	subs	r2, #1
 8001958:	0411      	lsls	r1, r2, #16
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800196a:	430a      	orrs	r2, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	e007      	b.n	800198a <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10c      	bne.n	80019c2 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f023 010f 	bic.w	r1, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c0:	e007      	b.n	80019d2 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020f 	bic.w	r2, r2, #15
 80019d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80019e2:	e007      	b.n	80019f4 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	fff0c013 	.word	0xfff0c013
 8001a04:	fc00f81e 	.word	0xfc00f81e

08001a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_common_path_internal_channel;
  uint32_t tmp_config_path_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_OFFSET(pConfig->Offset));

  assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x22>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e183      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x32a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe50 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8162 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x300>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f7ff fd20 	bl	8001494 <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f7ff fcec 	bl	800143e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fe36 	bl	80016dc <LL_ADC_REG_IsConversionOngoing>
 8001a70:	6238      	str	r0, [r7, #32]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe43 	bl	8001702 <LL_ADC_INJ_IsConversionOngoing>
 8001a7c:	61f8      	str	r0, [r7, #28]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 80aa 	bne.w	8001bda <HAL_ADC_ConfigChannel+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 80a6 	bne.w	8001bda <HAL_ADC_ConfigChannel+0x1d2>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f7ff fd12 	bl	80014c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	61bb      	str	r3, [r7, #24]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d038      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x12a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6919      	ldr	r1, [r3, #16]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f7ff fbf4 	bl	80012ba <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff fc1f 	bl	8001320 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fc31 	bl	8001356 <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d102      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x102>
 8001b04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x104>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff fc3d 	bl	800138c <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x120>
 8001b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b26:	e000      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x122>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f7ff fc49 	bl	80013c2 <LL_ADC_SetOffsetUnsignedSaturation>
 8001b30:	e053      	b.n	8001bda <HAL_ADC_ConfigChannel+0x1d2>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fbda 	bl	80012f2 <LL_ADC_GetOffsetChannel>
 8001b3e:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4053      	eors	r3, r2
 8001b46:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x154>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fbe2 	bl	8001320 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbc5 	bl	80012f2 <LL_ADC_GetOffsetChannel>
 8001b68:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4053      	eors	r3, r2
 8001b70:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x17e>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fbcd 	bl	8001320 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fbb0 	bl	80012f2 <LL_ADC_GetOffsetChannel>
 8001b92:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4053      	eors	r3, r2
 8001b9a:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fbb8 	bl	8001320 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fb9b 	bl	80012f2 <LL_ADC_GetOffsetChannel>
 8001bbc:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4053      	eors	r3, r2
 8001bc4:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x1d2>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fba3 	bl	8001320 <LL_ADC_SetOffsetLevel>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 809f 	beq.w	8001d26 <HAL_ADC_ConfigChannel+0x31e>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be8:	4854      	ldr	r0, [pc, #336]	@ (8001d3c <HAL_ADC_ConfigChannel+0x334>)
 8001bea:	f7ff fb32 	bl	8001252 <LL_ADC_GetCommonPathInternalCh>
 8001bee:	6178      	str	r0, [r7, #20]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb50 	bl	800129a <LL_ADC_GetPathInternalCh>
 8001bfa:	6138      	str	r0, [r7, #16]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	@ (8001d40 <HAL_ADC_ConfigChannel+0x338>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d116      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x22c>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x22c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <HAL_ADC_ConfigChannel+0x33c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x21c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d48 <HAL_ADC_ConfigChannel+0x340>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d17b      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x314>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4843      	ldr	r0, [pc, #268]	@ (8001d3c <HAL_ADC_ConfigChannel+0x334>)
 8001c2e:	f7ff fafd 	bl	800122c <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c32:	e073      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x314>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a44      	ldr	r2, [pc, #272]	@ (8001d4c <HAL_ADC_ConfigChannel+0x344>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x28c>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d125      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x28c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001d44 <HAL_ADC_ConfigChannel+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0x254>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3c      	ldr	r2, [pc, #240]	@ (8001d48 <HAL_ADC_ConfigChannel+0x340>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d161      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x318>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c62:	4619      	mov	r1, r3
 8001c64:	4835      	ldr	r0, [pc, #212]	@ (8001d3c <HAL_ADC_ConfigChannel+0x334>)
 8001c66:	f7ff fae1 	bl	800122c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c6a:	4b39      	ldr	r3, [pc, #228]	@ (8001d50 <HAL_ADC_ConfigChannel+0x348>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	4a38      	ldr	r2, [pc, #224]	@ (8001d54 <HAL_ADC_ConfigChannel+0x34c>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x284>
          {
            wait_loop_index--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f9      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x27e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c92:	e045      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x318>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2f      	ldr	r2, [pc, #188]	@ (8001d58 <HAL_ADC_ConfigChannel+0x350>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d116      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x2c4>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x2c4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <HAL_ADC_ConfigChannel+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x2b4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <HAL_ADC_ConfigChannel+0x340>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d133      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x31c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481d      	ldr	r0, [pc, #116]	@ (8001d3c <HAL_ADC_ConfigChannel+0x334>)
 8001cc6:	f7ff fab1 	bl	800122c <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cca:	e02b      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x31c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_ADC_ConfigChannel+0x354>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d127      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d122      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_ADC_ConfigChannel+0x33c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0x2ec>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a16      	ldr	r2, [pc, #88]	@ (8001d48 <HAL_ADC_ConfigChannel+0x340>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d118      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7ff fab4 	bl	800126e <LL_ADC_SetPathInternalCh>
 8001d06:	e00e      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d1c:	bf00      	nop
 8001d1e:	e002      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d24:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8001d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	42028300 	.word	0x42028300
 8001d40:	00400c00 	.word	0x00400c00
 8001d44:	42028000 	.word	0x42028000
 8001d48:	42028100 	.word	0x42028100
 8001d4c:	00800c11 	.word	0x00800c11
 8001d50:	20000000 	.word	0x20000000
 8001d54:	053e2d63 	.word	0x053e2d63
 8001d58:	01000c10 	.word	0x01000c10
 8001d5c:	00010c12 	.word	0x00010c12

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff6a 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea2:	f7ff ff81 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001ea6:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f7ff ffb3 	bl	8001e18 <NVIC_EncodePriority>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff82 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00d      	b.n	8001efa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ef2:	f043 0303 	orr.w	r3, r3, #3
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d844      	bhi.n	8001fa4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f43 	.word	0x08001f43
 8001f24:	08001f61 	.word	0x08001f61
 8001f28:	08001f83 	.word	0x08001f83
 8001f2c:	08001fa5 	.word	0x08001fa5
 8001f30:	08001f35 	.word	0x08001f35
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6013      	str	r3, [r2, #0]
      break;
 8001f40:	e031      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f5a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001f5e:	e022      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f76:	4a10      	ldr	r2, [pc, #64]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f7c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001f80:	e011      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f90:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f94:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001fa4:	bf00      	nop
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010
 8001fb8:	40030c00 	.word	0x40030c00

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	e162      	b.n	8002292 <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8154 	beq.w	800228c <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d005      	beq.n	8001ffc <HAL_GPIO_Init+0x40>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d130      	bne.n	800205e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002032:	2201      	movs	r2, #1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b03      	cmp	r3, #3
 8002068:	d109      	bne.n	800207e <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8002072:	2b03      	cmp	r3, #3
 8002074:	d11b      	bne.n	80020ae <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d017      	beq.n	80020ae <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d123      	bne.n	8002102 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0203 	and.w	r2, r3, #3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a4 	beq.w	800228c <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002144:	4a5a      	ldr	r2, [pc, #360]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3318      	adds	r3, #24
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a52      	ldr	r2, [pc, #328]	@ (80022b4 <HAL_GPIO_Init+0x2f8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d025      	beq.n	80021bc <HAL_GPIO_Init+0x200>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a51      	ldr	r2, [pc, #324]	@ (80022b8 <HAL_GPIO_Init+0x2fc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01f      	beq.n	80021b8 <HAL_GPIO_Init+0x1fc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a50      	ldr	r2, [pc, #320]	@ (80022bc <HAL_GPIO_Init+0x300>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x1f8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4f      	ldr	r2, [pc, #316]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1f4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4e      	ldr	r2, [pc, #312]	@ (80022c4 <HAL_GPIO_Init+0x308>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1f0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4d      	ldr	r2, [pc, #308]	@ (80022c8 <HAL_GPIO_Init+0x30c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1ec>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4c      	ldr	r2, [pc, #304]	@ (80022cc <HAL_GPIO_Init+0x310>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1e8>
 80021a0:	2307      	movs	r3, #7
 80021a2:	e00c      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021a4:	2310      	movs	r3, #16
 80021a6:	e00a      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021a8:	2306      	movs	r3, #6
 80021aa:	e008      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e006      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e004      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_GPIO_Init+0x202>
 80021bc:	2300      	movs	r3, #0
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	f002 0203 	and.w	r2, r2, #3
 80021c4:	00d2      	lsls	r2, r2, #3
 80021c6:	4093      	lsls	r3, r2
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80021ce:	4938      	ldr	r1, [pc, #224]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3318      	adds	r3, #24
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021dc:	4b34      	ldr	r3, [pc, #208]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002202:	4a2b      	ldr	r2, [pc, #172]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800220a:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 800220c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002230:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	f47f ae95 	bne.w	8001fcc <HAL_GPIO_Init+0x10>
  }
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40032000 	.word	0x40032000
 80022b4:	42020000 	.word	0x42020000
 80022b8:	42020400 	.word	0x42020400
 80022bc:	42020800 	.word	0x42020800
 80022c0:	42020c00 	.word	0x42020c00
 80022c4:	42021000 	.word	0x42021000
 80022c8:	42021800 	.word	0x42021800
 80022cc:	42021c00 	.word	0x42021c00

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e08d      	b.n	800242e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fc62 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	@ 0x24
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e006      	b.n	8002388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d108      	bne.n	80023a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	e007      	b.n	80023b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	d138      	bne.n	80024be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002456:	2302      	movs	r3, #2
 8002458:	e032      	b.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	@ 0x24
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002488:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d139      	bne.n	8002556 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e033      	b.n	8002558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	@ 0x24
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800251e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0c3      	b.n	80026fe <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fc5c 	bl	8000e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fbdf 	bl	8004d60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e03f      	b.n	8002628 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	3315      	adds	r3, #21
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3314      	adds	r3, #20
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	3317      	adds	r3, #23
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3324      	adds	r3, #36	@ 0x24
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3328      	adds	r3, #40	@ 0x28
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	3304      	adds	r3, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	3301      	adds	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	791b      	ldrb	r3, [r3, #4]
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	429a      	cmp	r2, r3
 8002630:	d3ba      	bcc.n	80025a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e044      	b.n	80026c2 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3b5      	bcc.n	8002638 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7c1a      	ldrb	r2, [r3, #16]
 80026d4:	f88d 2000 	strb.w	r2, [sp]
 80026d8:	3304      	adds	r3, #4
 80026da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026dc:	f002 fb78 	bl	8004dd0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7b1b      	ldrb	r3, [r3, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f805 	bl	8002706 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f023 0303 	bic.w	r3, r3, #3
 800275c:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8002766:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800276c:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2232      	movs	r2, #50	@ 0x32
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002788:	e002      	b.n	8002790 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3b01      	subs	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d002      	beq.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x58>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f2      	bne.n	800278a <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e000      	b.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40030800 	.word	0x40030800
 80027c0:	20000000 	.word	0x20000000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	6113      	str	r3, [r2, #16]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40030800 	.word	0x40030800

080027e8 <HAL_PWREx_EnableVddA>:
  * @brief  Enable VDDA supply valid.
  * @note   Setting this bit is mandatory to use the analog peripherals.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_PWREx_EnableVddA+0x1c>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_PWREx_EnableVddA+0x1c>)
 80027f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	6113      	str	r3, [r2, #16]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40030800 	.word	0x40030800

08002808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e340      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b98      	ldr	r3, [pc, #608]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80ad 	beq.w	800298c <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 80a5 	bne.w	800298c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e32a      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04f      	beq.n	80028ee <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002858:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a87      	ldr	r2, [pc, #540]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e02f      	b.n	80028c6 <HAL_RCC_OscConfig+0xbe>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286e:	d10c      	bne.n	800288a <HAL_RCC_OscConfig+0x82>
 8002870:	4b82      	ldr	r3, [pc, #520]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a81      	ldr	r2, [pc, #516]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002876:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7e      	ldr	r2, [pc, #504]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e01d      	b.n	80028c6 <HAL_RCC_OscConfig+0xbe>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0xa6>
 8002894:	4b79      	ldr	r3, [pc, #484]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a78      	ldr	r2, [pc, #480]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800289a:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b76      	ldr	r3, [pc, #472]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a75      	ldr	r2, [pc, #468]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0xbe>
 80028ae:	4b73      	ldr	r3, [pc, #460]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a72      	ldr	r2, [pc, #456]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b70      	ldr	r3, [pc, #448]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6f      	ldr	r2, [pc, #444]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028c0:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fc81 	bl	80011cc <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ce:	f7fe fc7d 	bl	80011cc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	@ 0x64
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e2dd      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e0:	4b66      	ldr	r3, [pc, #408]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0xc6>
 80028ec:	e04e      	b.n	800298c <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0xfe>
 80028f8:	4b60      	ldr	r3, [pc, #384]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5f      	ldr	r2, [pc, #380]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e02f      	b.n	8002966 <HAL_RCC_OscConfig+0x15e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x122>
 8002910:	4b5a      	ldr	r3, [pc, #360]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a59      	ldr	r2, [pc, #356]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b57      	ldr	r3, [pc, #348]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a56      	ldr	r2, [pc, #344]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e01d      	b.n	8002966 <HAL_RCC_OscConfig+0x15e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x146>
 8002934:	4b51      	ldr	r3, [pc, #324]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a50      	ldr	r2, [pc, #320]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800293a:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b4e      	ldr	r3, [pc, #312]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x15e>
 800294e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a4a      	ldr	r2, [pc, #296]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b48      	ldr	r3, [pc, #288]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002960:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fc31 	bl	80011cc <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296e:	f7fe fc2d 	bl	80011cc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	@ 0x64
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e28d      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002980:	4b3e      	ldr	r3, [pc, #248]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d054      	beq.n	8002a42 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d110      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e278      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	4930      	ldr	r1, [pc, #192]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	610b      	str	r3, [r1, #16]
 80029be:	e040      	b.n	8002a42 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fbfa 	bl	80011cc <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fbf6 	bl	80011cc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e256      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	491c      	ldr	r1, [pc, #112]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	610b      	str	r3, [r1, #16]
 8002a0e:	e018      	b.n	8002a42 <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fbd6 	bl	80011cc <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe fbd2 	bl	80011cc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e232      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d038      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01b      	beq.n	8002a8e <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fbb3 	bl	80011cc <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6a:	f7fe fbaf 	bl	80011cc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d903      	bls.n	8002a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e20f      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
 8002a7c:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a80:	4ba0      	ldr	r3, [pc, #640]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ee      	beq.n	8002a6a <HAL_RCC_OscConfig+0x262>
 8002a8c:	e018      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a8e:	4b9d      	ldr	r3, [pc, #628]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a9c      	ldr	r2, [pc, #624]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fb97 	bl	80011cc <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa2:	f7fe fb93 	bl	80011cc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1f3      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ab4:	4b93      	ldr	r3, [pc, #588]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a7 	beq.w	8002c1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d110      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae6:	4a87      	ldr	r2, [pc, #540]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002af0:	4b84      	ldr	r3, [pc, #528]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002afe:	2301      	movs	r3, #1
 8002b00:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b02:	4b81      	ldr	r3, [pc, #516]	@ (8002d08 <HAL_RCC_OscConfig+0x500>)
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	4a80      	ldr	r2, [pc, #512]	@ (8002d08 <HAL_RCC_OscConfig+0x500>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d051      	beq.n	8002bba <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8002b16:	4b7b      	ldr	r3, [pc, #492]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002b18:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b20:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8002b2c:	4a75      	ldr	r2, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fb4a 	bl	80011cc <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fb46 	bl	80011cc <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1a4      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b52:	4b6c      	ldr	r3, [pc, #432]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002b54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ed      	beq.n	8002b3c <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01e      	beq.n	8002baa <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fb2d 	bl	80011cc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e18b      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b84:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002b86:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <HAL_RCC_OscConfig+0x366>
 8002b92:	e038      	b.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fb1a 	bl	80011cc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e178      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002baa:	4b56      	ldr	r3, [pc, #344]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ed      	bne.n	8002b94 <HAL_RCC_OscConfig+0x38c>
 8002bb8:	e025      	b.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8002bba:	4b52      	ldr	r3, [pc, #328]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bbc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002bc0:	4a50      	ldr	r2, [pc, #320]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bc2:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002bc6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bca:	4b4e      	ldr	r3, [pc, #312]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bcc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe faf7 	bl	80011cc <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe faf3 	bl	80011cc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e151      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4b42      	ldr	r3, [pc, #264]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002bfa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ed      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c06:	7efb      	ldrb	r3, [r7, #27]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c12:	4a3c      	ldr	r2, [pc, #240]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d078      	beq.n	8002d1a <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002c2e:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d050      	beq.n	8002cda <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d023      	beq.n	8002c8e <HAL_RCC_OscConfig+0x486>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01e      	beq.n	8002c8e <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8002c58:	4a2a      	ldr	r2, [pc, #168]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fab4 	bl	80011cc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fab0 	bl	80011cc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b14      	cmp	r3, #20
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e110      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ef      	bne.n	8002c68 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f7fe faab 	bl	80011e4 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002ca8:	4a16      	ldr	r2, [pc, #88]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fa8c 	bl	80011cc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fa88 	bl	80011cc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b14      	cmp	r3, #20
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0e8      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ccc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4b0>
 8002cd8:	e01f      	b.n	8002d1a <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002ce2:	4a08      	ldr	r2, [pc, #32]	@ (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fa6f 	bl	80011cc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002cf0:	e00c      	b.n	8002d0c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fa6b 	bl	80011cc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b14      	cmp	r3, #20
 8002cfe:	d905      	bls.n	8002d0c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0cb      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
 8002d04:	40030c00 	.word	0x40030c00
 8002d08:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002d0c:	4b65      	ldr	r3, [pc, #404]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1eb      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d068      	beq.n	8002df8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8002d38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a59      	ldr	r2, [pc, #356]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e03b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8002d4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0305 	and.w	r3, r3, #5
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0a0      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8002d5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002d62:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d76:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8002d78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d84:	f000 f982 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b46      	ldr	r3, [pc, #280]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	4945      	ldr	r1, [pc, #276]	@ (8002ea8 <HAL_RCC_OscConfig+0x6a0>)
 8002d94:	5ccb      	ldrb	r3, [r1, r3]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	4a44      	ldr	r2, [pc, #272]	@ (8002eac <HAL_RCC_OscConfig+0x6a4>)
 8002d9c:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d9e:	4b44      	ldr	r3, [pc, #272]	@ (8002eb0 <HAL_RCC_OscConfig+0x6a8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f980 	bl	80010a8 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e074      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc2:	f7fe fa03 	bl	80011cc <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002dc8:	e00f      	b.n	8002dea <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dca:	f7fe f9ff 	bl	80011cc <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d908      	bls.n	8002dea <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e058      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002dea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1e8      	bne.n	8002dca <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04a      	beq.n	8002e9a <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8002e0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e12:	f023 0308 	bic.w	r3, r3, #8
 8002e16:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e022      	b.n	8002e64 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0318 	and.w	r3, r3, #24
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e036      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8002e36:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	4313      	orrs	r3, r2
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e4c:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8002e4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8002e60:	2310      	movs	r3, #16
 8002e62:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe f9b2 	bl	80011cc <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8002e6a:	e00f      	b.n	8002e8c <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6c:	f7fe f9ae 	bl	80011cc <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d908      	bls.n	8002e8c <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e007      	b.n	8002e9c <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <HAL_RCC_OscConfig+0x69c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1e8      	bne.n	8002e6c <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40030c00 	.word	0x40030c00
 8002ea8:	08004e88 	.word	0x08004e88
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d2      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b68      	ldr	r3, [pc, #416]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4966      	ldr	r1, [pc, #408]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b64      	ldr	r3, [pc, #400]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ba      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d040      	beq.n	8002f86 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8002f04:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0a6      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09b      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e094      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f44:	4b4d      	ldr	r3, [pc, #308]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f023 0203 	bic.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	494a      	ldr	r1, [pc, #296]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f56:	f7fe f939 	bl	80011cc <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5e:	f7fe f935 	bl	80011cc <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e07c      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8002f74:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 020c 	and.w	r2, r3, #12
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d1eb      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8002f86:	4b3d      	ldr	r3, [pc, #244]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 030f 	bic.w	r3, r3, #15
 8002fa2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc4:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fe6:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8003010:	4a1a      	ldr	r2, [pc, #104]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d210      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 020f 	bic.w	r2, r3, #15
 800302e:	4912      	ldr	r1, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e012      	b.n	800306e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003048:	f000 f820 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x1cc>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1d0>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1d4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f81e 	bl	80010a8 <HAL_InitTick>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40022000 	.word	0x40022000
 800307c:	40030c00 	.word	0x40030c00
 8003080:	08004e88 	.word	0x08004e88
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003092:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <HAL_RCC_GetSysClockFreq+0x80>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x84>)
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	e029      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80030ae:	4b18      	ldr	r3, [pc, #96]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x84>)
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	e023      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 80030b4:	4b15      	ldr	r3, [pc, #84]	@ (800310c <HAL_RCC_GetSysClockFreq+0x80>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da02      	bge.n	80030d0 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x88>)
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	e001      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x8c>)
 80030d2:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0f5b      	lsrs	r3, r3, #29
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	e008      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x88>)
 80030e2:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80030e4:	4b09      	ldr	r3, [pc, #36]	@ (800310c <HAL_RCC_GetSysClockFreq+0x80>)
 80030e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80030ea:	0b1b      	lsrs	r3, r3, #12
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 80030fc:	683b      	ldr	r3, [r7, #0]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40030c00 	.word	0x40030c00
 8003110:	00f42400 	.word	0x00f42400
 8003114:	016e3600 	.word	0x016e3600
 8003118:	05b8d800 	.word	0x05b8d800

0800311c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003120:	f7ff ffb4 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x28>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4906      	ldr	r1, [pc, #24]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a05      	ldr	r2, [pc, #20]	@ (800314c <HAL_RCC_GetHCLKFreq+0x30>)
 8003138:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_RCC_GetHCLKFreq+0x30>)
 800313c:	681b      	ldr	r3, [r3, #0]
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40030c00 	.word	0x40030c00
 8003148:	08004e88 	.word	0x08004e88
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003154:	f7ff ffe2 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40030c00 	.word	0x40030c00
 8003174:	08004e98 	.word	0x08004e98

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800317c:	f7ff ffce 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40030c00 	.word	0x40030c00
 800319c:	08004e98 	.word	0x08004e98

080031a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80031a4:	f7ff ffba 	bl	800311c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	@ (80031c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40030c00 	.word	0x40030c00
 80031c4:	08004e98 	.word	0x08004e98

080031c8 <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 80031ce:	4b16      	ldr	r3, [pc, #88]	@ (8003228 <HAL_RCC_GetMSIKFreq+0x60>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00f      	beq.n	80031fe <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_RCC_GetMSIKFreq+0x64>)
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <HAL_RCC_GetMSIKFreq+0x68>)
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e008      	b.n	8003210 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_GetMSIKFreq+0x64>)
 8003200:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 8003202:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_GetMSIKFreq+0x60>)
 8003204:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	607b      	str	r3, [r7, #4]

  return tmp;
 800321a:	687b      	ldr	r3, [r7, #4]
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40030c00 	.word	0x40030c00
 800322c:	016e3600 	.word	0x016e3600
 8003230:	05b8d800 	.word	0x05b8d800

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003248:	4bad      	ldr	r3, [pc, #692]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800324a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800324e:	f023 0201 	bic.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	49aa      	ldr	r1, [pc, #680]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326a:	4ba5      	ldr	r3, [pc, #660]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800326c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003270:	f023 0204 	bic.w	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	49a1      	ldr	r1, [pc, #644]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800328c:	4b9c      	ldr	r3, [pc, #624]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800328e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4999      	ldr	r1, [pc, #612]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ae:	4b94      	ldr	r3, [pc, #592]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80032b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032b4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4990      	ldr	r1, [pc, #576]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 80032d0:	4b8b      	ldr	r3, [pc, #556]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80032d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4988      	ldr	r1, [pc, #544]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f2:	4b83      	ldr	r3, [pc, #524]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80032f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80032f8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	497f      	ldr	r1, [pc, #508]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003314:	4b7a      	ldr	r3, [pc, #488]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003316:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800331a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4977      	ldr	r1, [pc, #476]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8003336:	4b72      	ldr	r3, [pc, #456]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003338:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800333c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	496e      	ldr	r1, [pc, #440]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8003358:	4b69      	ldr	r3, [pc, #420]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800335a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800335e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	4966      	ldr	r1, [pc, #408]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800337a:	4b61      	ldr	r3, [pc, #388]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800337c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	495d      	ldr	r1, [pc, #372]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 800339c:	4b58      	ldr	r3, [pc, #352]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800339e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	4955      	ldr	r1, [pc, #340]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80033be:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	494c      	ldr	r1, [pc, #304]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033e0:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033e6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ee:	4944      	ldr	r1, [pc, #272]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8003402:	4b3f      	ldr	r3, [pc, #252]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003404:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003408:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	493b      	ldr	r1, [pc, #236]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8003424:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003426:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800342a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003432:	4933      	ldr	r1, [pc, #204]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8003446:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003448:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800344c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	492a      	ldr	r1, [pc, #168]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800346a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	4922      	ldr	r1, [pc, #136]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 800348a:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800348c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003490:	f023 0208 	bic.w	r2, r3, #8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003498:	4919      	ldr	r1, [pc, #100]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ac:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80034b2:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	4911      	ldr	r1, [pc, #68]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80034d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034dc:	4908      	ldr	r1, [pc, #32]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d019      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80034f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80034fe:	bf00      	nop
 8003500:	40030c00 	.word	0x40030c00
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	4980      	ldr	r1, [pc, #512]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 800350e:	4b7e      	ldr	r3, [pc, #504]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003510:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003514:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	497a      	ldr	r1, [pc, #488]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8003530:	4b75      	ldr	r3, [pc, #468]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003532:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003536:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353e:	4972      	ldr	r1, [pc, #456]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8003552:	4b6d      	ldr	r3, [pc, #436]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003554:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003558:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	4969      	ldr	r1, [pc, #420]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003574:	4b64      	ldr	r3, [pc, #400]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003576:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003582:	4961      	ldr	r1, [pc, #388]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003596:	4b5c      	ldr	r3, [pc, #368]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003598:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800359c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a4:	4958      	ldr	r1, [pc, #352]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 80035b8:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80035be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c6:	4950      	ldr	r1, [pc, #320]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80035e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e8:	4947      	ldr	r1, [pc, #284]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f280 8082 	bge.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 80035fa:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003600:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003604:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360c:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	d072      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 800361c:	4b3a      	ldr	r3, [pc, #232]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800361e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d110      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800362c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003630:	4a35      	ldr	r2, [pc, #212]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800363a:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800363c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003648:	2301      	movs	r3, #1
 800364a:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800364c:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	4a2e      	ldr	r2, [pc, #184]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	4b2a      	ldr	r3, [pc, #168]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003660:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003664:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	4b26      	ldr	r3, [pc, #152]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003670:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003674:	4a24      	ldr	r2, [pc, #144]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367a:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003684:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800369a:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 800369c:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01c      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fd8d 	bl	80011cc <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80036b4:	e011      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd fd89 	bl	80011cc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d908      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80036c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80036ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e012      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80036dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0e6      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036e8:	7efb      	ldrb	r3, [r7, #27]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f4:	4a04      	ldr	r2, [pc, #16]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40030c00 	.word	0x40030c00
 800370c:	40030800 	.word	0x40030800

08003710 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003722:	f000 8469 	beq.w	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800372c:	f200 84a0 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003736:	f000 8420 	beq.w	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003740:	f200 8496 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800374a:	f000 83d3 	beq.w	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003754:	f200 848c 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800375e:	f000 83b8 	beq.w	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003768:	f200 8482 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003772:	f000 8377 	beq.w	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800377c:	f200 8478 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003786:	f000 835c 	beq.w	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003790:	f200 846e 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800379a:	f000 8326 	beq.w	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037a4:	f200 8464 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ae:	f000 82db 	beq.w	8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b8:	f200 845a 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037c2:	f000 82b9 	beq.w	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037cc:	f200 8450 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037d6:	f000 828c 	beq.w	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e0:	f200 8446 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037ea:	f000 8271 	beq.w	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037f4:	f200 843c 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fe:	f000 8246 	beq.w	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	f200 8432 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003812:	f000 8228 	beq.w	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800381c:	f200 8428 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003826:	f000 81ef 	beq.w	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003830:	f200 841e 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383a:	f000 81ce 	beq.w	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003844:	f200 8414 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384e:	f000 8189 	beq.w	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003858:	f200 840a 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	f000 816e 	beq.w	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386c:	f200 8400 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003876:	f000 8121 	beq.w	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003880:	f200 83f6 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388a:	f000 8106 	beq.w	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003894:	f200 83ec 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b80      	cmp	r3, #128	@ 0x80
 800389c:	f000 80ec 	beq.w	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b80      	cmp	r3, #128	@ 0x80
 80038a4:	f200 83e4 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d84c      	bhi.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 83dd 	beq.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	2b1f      	cmp	r3, #31
 80038bc:	f200 83d8 	bhi.w	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80038c0:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	08003953 	.word	0x08003953
 80038cc:	08003983 	.word	0x08003983
 80038d0:	08004071 	.word	0x08004071
 80038d4:	080039b3 	.word	0x080039b3
 80038d8:	08004071 	.word	0x08004071
 80038dc:	08004071 	.word	0x08004071
 80038e0:	08004071 	.word	0x08004071
 80038e4:	080039e3 	.word	0x080039e3
 80038e8:	08004071 	.word	0x08004071
 80038ec:	08004071 	.word	0x08004071
 80038f0:	08004071 	.word	0x08004071
 80038f4:	08004071 	.word	0x08004071
 80038f8:	08004071 	.word	0x08004071
 80038fc:	08004071 	.word	0x08004071
 8003900:	08004071 	.word	0x08004071
 8003904:	08003a13 	.word	0x08003a13
 8003908:	08004071 	.word	0x08004071
 800390c:	08004071 	.word	0x08004071
 8003910:	08004071 	.word	0x08004071
 8003914:	08004071 	.word	0x08004071
 8003918:	08004071 	.word	0x08004071
 800391c:	08004071 	.word	0x08004071
 8003920:	08004071 	.word	0x08004071
 8003924:	08004071 	.word	0x08004071
 8003928:	08004071 	.word	0x08004071
 800392c:	08004071 	.word	0x08004071
 8003930:	08004071 	.word	0x08004071
 8003934:	08004071 	.word	0x08004071
 8003938:	08004071 	.word	0x08004071
 800393c:	08004071 	.word	0x08004071
 8003940:	08004071 	.word	0x08004071
 8003944:	08003a35 	.word	0x08003a35
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b40      	cmp	r3, #64	@ 0x40
 800394c:	f000 8083 	beq.w	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8003950:	e38e      	b.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003952:	4ba9      	ldr	r3, [pc, #676]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003954:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003964:	f7ff fc08 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003968:	60f8      	str	r0, [r7, #12]
      break;
 800396a:	e383      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800396c:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003978:	f040 837c 	bne.w	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 800397c:	4b9f      	ldr	r3, [pc, #636]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800397e:	60fb      	str	r3, [r7, #12]
      break;
 8003980:	e378      	b.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003982:	4b9d      	ldr	r3, [pc, #628]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003984:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003994:	f7ff fbdc 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]
      break;
 800399a:	e36d      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800399c:	4b96      	ldr	r3, [pc, #600]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a8:	f040 8366 	bne.w	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 80039ac:	4b93      	ldr	r3, [pc, #588]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80039ae:	60fb      	str	r3, [r7, #12]
      break;
 80039b0:	e362      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80039b2:	4b91      	ldr	r3, [pc, #580]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80039b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d103      	bne.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7ff fbc4 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]
      break;
 80039ca:	e357      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039cc:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d8:	f040 8350 	bne.w	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 80039dc:	4b87      	ldr	r3, [pc, #540]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80039de:	60fb      	str	r3, [r7, #12]
      break;
 80039e0:	e34c      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80039e2:	4b85      	ldr	r3, [pc, #532]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80039e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7ff fbac 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 80039f8:	60f8      	str	r0, [r7, #12]
      break;
 80039fa:	e341      	b.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a08:	f040 833a 	bne.w	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8003a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003a0e:	60fb      	str	r3, [r7, #12]
      break;
 8003a10:	e336      	b.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003a12:	4b79      	ldr	r3, [pc, #484]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003a14:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff fb94 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003a28:	60f8      	str	r0, [r7, #12]
      break;
 8003a2a:	e340      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003a2c:	f7ff fbcc 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003a30:	60f8      	str	r0, [r7, #12]
      break;
 8003a32:	e33c      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003a34:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003a36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003a46:	f7ff fb83 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003a4a:	60f8      	str	r0, [r7, #12]
      break;
 8003a4c:	e32f      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003a4e:	f7ff fbbb 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003a52:	60f8      	str	r0, [r7, #12]
      break;
 8003a54:	e32b      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003a56:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003a58:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a60:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7ff fb72 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	60f8      	str	r0, [r7, #12]
      break;
 8003a6e:	e31e      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003a70:	f7ff fbaa 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003a74:	60f8      	str	r0, [r7, #12]
      break;
 8003a76:	e31a      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003a78:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003a7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a82:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003a8a:	f7ff fb75 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003a8e:	60f8      	str	r0, [r7, #12]
      break;
 8003a90:	e30d      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003a92:	f7ff fb99 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003a96:	60f8      	str	r0, [r7, #12]
      break;
 8003a98:	e309      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8003a9a:	4b57      	ldr	r3, [pc, #348]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003a9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7ff fb50 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	60f8      	str	r0, [r7, #12]
      break;
 8003ab2:	e2fc      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003ab4:	f7ff fb88 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003ab8:	60f8      	str	r0, [r7, #12]
      break;
 8003aba:	e2f8      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003abc:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003abe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ac2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003ac6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7ff fb3f 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	60f8      	str	r0, [r7, #12]
      break;
 8003ad4:	e2d6      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003adc:	d116      	bne.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003ade:	4b46      	ldr	r3, [pc, #280]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003ae0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	f040 82cb 	bne.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 8003aee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003af2:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003af4:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003af6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	f040 82c0 	bne.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	09db      	lsrs	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
      break;
 8003b0a:	e2bb      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b14:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b20:	f040 82b0 	bne.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003b26:	60fb      	str	r3, [r7, #12]
      break;
 8003b28:	e2ac      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b2a:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003b2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f040 82a5 	bne.w	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3e:	60fb      	str	r3, [r7, #12]
      break;
 8003b40:	e2a0      	b.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003b42:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003b44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7ff fb10 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
      break;
 8003b5a:	e2a8      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003b5c:	f7ff fb34 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003b60:	60f8      	str	r0, [r7, #12]
      break;
 8003b62:	e2a4      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8003b64:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003b66:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b6a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003b6e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 8003b76:	f7ff fad1 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	60fb      	str	r3, [r7, #12]
      break;
 8003b80:	e282      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b88:	d10b      	bne.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003b8c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	f040 8277 	bne.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b9e:	60fb      	str	r3, [r7, #12]
      break;
 8003ba0:	e272      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba8:	f040 826e 	bne.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003bac:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003bae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	f040 8266 	bne.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 8003bbc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003bc0:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003bc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	f040 825b 	bne.w	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	09db      	lsrs	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]
      break;
 8003bd8:	e256      	b.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003bdc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bec:	d108      	bne.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 8003bee:	f7ff faeb 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003bf2:	60f8      	str	r0, [r7, #12]
      break;
 8003bf4:	e25b      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003bf6:	bf00      	nop
 8003bf8:	40030c00 	.word	0x40030c00
 8003bfc:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8003c00:	f7ff fa44 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003c04:	60f8      	str	r0, [r7, #12]
      break;
 8003c06:	e252      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003c08:	4ba4      	ldr	r3, [pc, #656]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003c0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c0e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003c12:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003c1a:	4ba0      	ldr	r3, [pc, #640]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c26:	f040 8231 	bne.w	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 8003c2a:	4b9d      	ldr	r3, [pc, #628]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8003c2c:	60fb      	str	r3, [r7, #12]
      break;
 8003c2e:	e22d      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c36:	d103      	bne.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 8003c38:	f7ff fac6 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003c3c:	60f8      	str	r0, [r7, #12]
      break;
 8003c3e:	e225      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c46:	d10a      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c48:	4b94      	ldr	r3, [pc, #592]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c54:	f040 821a 	bne.w	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 8003c58:	4b92      	ldr	r3, [pc, #584]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003c5a:	60fb      	str	r3, [r7, #12]
      break;
 8003c5c:	e216      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003c5e:	f7ff fa15 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003c62:	60f8      	str	r0, [r7, #12]
      break;
 8003c64:	e212      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 8003c66:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003c6a:	f7ff fd51 	bl	8003710 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c6e:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8003c70:	4b8a      	ldr	r3, [pc, #552]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003c72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c82:	f040 8205 	bne.w	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
      break;
 8003c8c:	e200      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8003c8e:	4b83      	ldr	r3, [pc, #524]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003c90:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 8003ca0:	f7ff fa3c 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003ca4:	60f8      	str	r0, [r7, #12]
      break;
 8003ca6:	e202      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d103      	bne.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003cae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003cb2:	60fb      	str	r3, [r7, #12]
      break;
 8003cb4:	e1fb      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d103      	bne.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 8003cbc:	f7ff fa84 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003cc0:	60f8      	str	r0, [r7, #12]
      break;
 8003cc2:	e1f4      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003cc4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003cc8:	f7ff fd22 	bl	8003710 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ccc:	60f8      	str	r0, [r7, #12]
      break;
 8003cce:	e1ee      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8003cd0:	4b72      	ldr	r3, [pc, #456]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003cd2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ce2:	f7ff fa35 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8003ce6:	60f8      	str	r0, [r7, #12]
      break;
 8003ce8:	e1e1      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003cea:	f7ff fa6d 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003cee:	60f8      	str	r0, [r7, #12]
      break;
 8003cf0:	e1dd      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003cf4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003cf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003cfc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d04:	f7ff fa60 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003d08:	60f8      	str	r0, [r7, #12]
      break;
 8003d0a:	e1c3      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d103      	bne.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003d12:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003d16:	60fb      	str	r3, [r7, #12]
      break;
 8003d18:	e1bc      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	f040 81b9 	bne.w	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d22:	4b5e      	ldr	r3, [pc, #376]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d2e:	f040 81b1 	bne.w	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8003d32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003d34:	60fb      	str	r3, [r7, #12]
      break;
 8003d36:	e1ad      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003d38:	4b58      	ldr	r3, [pc, #352]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003d3a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d42:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003d4a:	4b54      	ldr	r3, [pc, #336]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d56:	f040 819f 	bne.w	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 8003d5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8003d5c:	60fb      	str	r3, [r7, #12]
      break;
 8003d5e:	e19b      	b.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8003d60:	f7ff fa32 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003d64:	60f8      	str	r0, [r7, #12]
      break;
 8003d66:	e197      	b.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8003d68:	4b4c      	ldr	r3, [pc, #304]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003d6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d72:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 8003d7a:	f7ff f9cf 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	e014      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d109      	bne.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d8a:	4b44      	ldr	r3, [pc, #272]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 8003d98:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da4:	d102      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 8003da6:	f7ff fa0f 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003daa:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 8003dac:	4b3b      	ldr	r3, [pc, #236]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003dae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003db2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003db6:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	e00c      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dca:	d202      	bcs.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	e005      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0b1a      	lsrs	r2, r3, #12
 8003dd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
      break;
 8003de8:	e161      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 8003dea:	4b2c      	ldr	r3, [pc, #176]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003dec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df4:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003dfc:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003dfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	f040 8148 	bne.w	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8003e0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e10:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003e12:	4b22      	ldr	r3, [pc, #136]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003e14:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	f040 813d 	bne.w	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	09db      	lsrs	r3, r3, #7
 8003e26:	60fb      	str	r3, [r7, #12]
      break;
 8003e28:	e138      	b.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003e2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	f040 8131 	bne.w	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3e:	60fb      	str	r3, [r7, #12]
      break;
 8003e40:	e12c      	b.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8003e42:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003e44:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e4c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e54:	f7ff f91a 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003e58:	60f8      	str	r0, [r7, #12]
      break;
 8003e5a:	e128      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003e5c:	f7ff f9b4 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003e60:	60f8      	str	r0, [r7, #12]
      break;
 8003e62:	e124      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003e64:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
        frequency = HAL_RCC_GetPCLK3Freq();
 8003e76:	f7ff f993 	bl	80031a0 <HAL_RCC_GetPCLK3Freq>
 8003e7a:	60f8      	str	r0, [r7, #12]
      break;
 8003e7c:	e110      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d113      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e90:	f040 8106 	bne.w	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8003e96:	60fb      	str	r3, [r7, #12]
      break;
 8003e98:	e102      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8003e9a:	bf00      	nop
 8003e9c:	40030c00 	.word	0x40030c00
 8003ea0:	02dc6c00 	.word	0x02dc6c00
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003eb2:	4b81      	ldr	r3, [pc, #516]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003eb4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 80ef 	bne.w	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 8003ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec6:	60fb      	str	r3, [r7, #12]
      break;
 8003ec8:	e0ea      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 8003eca:	f7ff f97d 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003ece:	60f8      	str	r0, [r7, #12]
      break;
 8003ed0:	e0e6      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003ed2:	4b79      	ldr	r3, [pc, #484]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003ed4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 8003ee4:	f7ff f95c 	bl	80031a0 <HAL_RCC_GetPCLK3Freq>
 8003ee8:	60f8      	str	r0, [r7, #12]
      break;
 8003eea:	e0e0      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8003eec:	f7ff f96c 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003ef0:	60f8      	str	r0, [r7, #12]
      break;
 8003ef2:	e0dc      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8003ef4:	4b70      	ldr	r3, [pc, #448]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 8003f06:	f7ff f95f 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003f0a:	60f8      	str	r0, [r7, #12]
      break;
 8003f0c:	e0ca      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f14:	d116      	bne.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f16:	4b68      	ldr	r3, [pc, #416]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f18:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	f040 80bf 	bne.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 8003f26:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f2a:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003f2c:	4b62      	ldr	r3, [pc, #392]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	f040 80b4 	bne.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	09db      	lsrs	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
      break;
 8003f42:	e0af      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4a:	d10a      	bne.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f58:	f040 80a4 	bne.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8003f5c:	4b57      	ldr	r3, [pc, #348]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8003f5e:	60fb      	str	r3, [r7, #12]
      break;
 8003f60:	e0a0      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f62:	4b55      	ldr	r3, [pc, #340]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f64:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f040 8099 	bne.w	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f76:	60fb      	str	r3, [r7, #12]
      break;
 8003f78:	e094      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f84:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8003f8c:	f7ff f91c 	bl	80031c8 <HAL_RCC_GetMSIKFreq>
 8003f90:	60f8      	str	r0, [r7, #12]
      break;
 8003f92:	e089      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9a:	d114      	bne.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f9c:	4b46      	ldr	r3, [pc, #280]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003f9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d17e      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 8003faa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003fae:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003fb0:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003fb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d174      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	09db      	lsrs	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
      break;
 8003fc4:	e070      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fce:	4b3a      	ldr	r3, [pc, #232]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fda:	d165      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 8003fdc:	4b37      	ldr	r3, [pc, #220]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8003fde:	60fb      	str	r3, [r7, #12]
      break;
 8003fe0:	e062      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fe2:	4b35      	ldr	r3, [pc, #212]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003fe4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d15b      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 8003ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff4:	60fb      	str	r3, [r7, #12]
      break;
 8003ff6:	e057      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8003ffa:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400a:	d10a      	bne.n	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800400c:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800400e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d148      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 800401a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401e:	60fb      	str	r3, [r7, #12]
      break;
 8004020:	e044      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004028:	d114      	bne.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800402a:	4b23      	ldr	r3, [pc, #140]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800402c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d139      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 8004038:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800403c:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800403e:	4b1e      	ldr	r3, [pc, #120]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004040:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d12f      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	09db      	lsrs	r3, r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
      break;
 8004052:	e02b      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800405a:	d127      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800405c:	4b16      	ldr	r3, [pc, #88]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004068:	d120      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 800406a:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 800406c:	60fb      	str	r3, [r7, #12]
      break;
 800406e:	e01d      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8004070:	bf00      	nop
 8004072:	e01c      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004074:	bf00      	nop
 8004076:	e01a      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004078:	bf00      	nop
 800407a:	e018      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800407c:	bf00      	nop
 800407e:	e016      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004080:	bf00      	nop
 8004082:	e014      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004084:	bf00      	nop
 8004086:	e012      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004088:	bf00      	nop
 800408a:	e010      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800408c:	bf00      	nop
 800408e:	e00e      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004090:	bf00      	nop
 8004092:	e00c      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004094:	bf00      	nop
 8004096:	e00a      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004098:	bf00      	nop
 800409a:	e008      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800409c:	bf00      	nop
 800409e:	e006      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80040ac:	bf00      	nop
  }

  return (frequency);
 80040ae:	68fb      	ldr	r3, [r7, #12]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40030c00 	.word	0x40030c00
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	0007a120 	.word	0x0007a120

080040c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0dc      	b.n	8004290 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6d      	ldr	r2, [pc, #436]	@ (8004298 <HAL_SPI_Init+0x1d4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d105      	bne.n	80040f2 <HAL_SPI_Init+0x2e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d901      	bls.n	80040f2 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0ce      	b.n	8004290 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8d6 	bl	80042a4 <SPI_GetPacketSize>
 80040f8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a66      	ldr	r2, [pc, #408]	@ (8004298 <HAL_SPI_Init+0x1d4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d102      	bne.n	800410a <HAL_SPI_Init+0x46>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d80c      	bhi.n	8004124 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800410e:	4a63      	ldr	r2, [pc, #396]	@ (800429c <HAL_SPI_Init+0x1d8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a61      	ldr	r2, [pc, #388]	@ (80042a0 <HAL_SPI_Init+0x1dc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d104      	bne.n	8004128 <HAL_SPI_Init+0x64>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d901      	bls.n	8004128 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b3      	b.n	8004290 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc fdbb 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004164:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800416e:	d119      	bne.n	80041a4 <HAL_SPI_Init+0xe0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004178:	d103      	bne.n	8004182 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800418e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004192:	d107      	bne.n	80041a4 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041a2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00f      	beq.n	80041d0 <HAL_SPI_Init+0x10c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d90b      	bls.n	80041d0 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e007      	b.n	80041e0 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041de:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f2:	ea42 0103 	orr.w	r1, r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	ea42 0103 	orr.w	r1, r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40002000 	.word	0x40002000
 800429c:	40013000 	.word	0x40013000
 80042a0:	40003800 	.word	0x40003800

080042a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	3301      	adds	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3307      	adds	r3, #7
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d12e      	bne.n	800434e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e028      	b.n	8004350 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800432a:	ea42 0103 	orr.w	r1, r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	460b      	mov	r3, r1
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e05b      	b.n	800442c <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7fc fcfa 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2224      	movs	r2, #36	@ 0x24
 8004390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_MultiProcessor_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9b5 	bl	800471c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f83e 	bl	8004434 <UART_SetConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_MultiProcessor_Init+0x66>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e034      	b.n	800442c <HAL_MultiProcessor_Init+0xd0>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043e0:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e8:	d10a      	bne.n	8004400 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80043f4:	7afb      	ldrb	r3, [r7, #11]
 80043f6:	061a      	lsls	r2, r3, #24
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fa1b 	bl	8004860 <UART_CheckIdleState>
 800442a:	4603      	mov	r3, r0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b08e      	sub	sp, #56	@ 0x38
 800443a:	af00      	add	r7, sp, #0
 800443c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	431a      	orrs	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	4313      	orrs	r3, r2
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b9b      	ldr	r3, [pc, #620]	@ (80046d0 <UART_SetConfig+0x29c>)
 8004464:	4013      	ands	r3, r2
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800446c:	430b      	orrs	r3, r1
 800446e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a90      	ldr	r2, [pc, #576]	@ (80046d4 <UART_SetConfig+0x2a0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800449c:	4313      	orrs	r3, r2
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80044aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	f023 010f 	bic.w	r1, r3, #15
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a81      	ldr	r2, [pc, #516]	@ (80046d8 <UART_SetConfig+0x2a4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d102      	bne.n	80044de <UART_SetConfig+0xaa>
 80044d8:	2301      	movs	r3, #1
 80044da:	633b      	str	r3, [r7, #48]	@ 0x30
 80044dc:	e022      	b.n	8004524 <UART_SetConfig+0xf0>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	@ (80046dc <UART_SetConfig+0x2a8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d102      	bne.n	80044ee <UART_SetConfig+0xba>
 80044e8:	2302      	movs	r3, #2
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ec:	e01a      	b.n	8004524 <UART_SetConfig+0xf0>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	@ (80046e0 <UART_SetConfig+0x2ac>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d102      	bne.n	80044fe <UART_SetConfig+0xca>
 80044f8:	2304      	movs	r3, #4
 80044fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80044fc:	e012      	b.n	8004524 <UART_SetConfig+0xf0>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a78      	ldr	r2, [pc, #480]	@ (80046e4 <UART_SetConfig+0x2b0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d102      	bne.n	800450e <UART_SetConfig+0xda>
 8004508:	2308      	movs	r3, #8
 800450a:	633b      	str	r3, [r7, #48]	@ 0x30
 800450c:	e00a      	b.n	8004524 <UART_SetConfig+0xf0>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a70      	ldr	r2, [pc, #448]	@ (80046d4 <UART_SetConfig+0x2a0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d103      	bne.n	8004520 <UART_SetConfig+0xec>
 8004518:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800451c:	633b      	str	r3, [r7, #48]	@ 0x30
 800451e:	e001      	b.n	8004524 <UART_SetConfig+0xf0>
 8004520:	2300      	movs	r3, #0
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6a      	ldr	r2, [pc, #424]	@ (80046d4 <UART_SetConfig+0x2a0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d16c      	bne.n	8004608 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800452e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004530:	f7ff f8ee 	bl	8003710 <HAL_RCCEx_GetPeriphCLKFreq>
 8004534:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80da 	beq.w	80046f2 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	4a69      	ldr	r2, [pc, #420]	@ (80046e8 <UART_SetConfig+0x2b4>)
 8004544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004548:	461a      	mov	r2, r3
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004550:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	4413      	add	r3, r2
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	429a      	cmp	r2, r3
 8004560:	d305      	bcc.n	800456e <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	429a      	cmp	r2, r3
 800456c:	d903      	bls.n	8004576 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004574:	e0bd      	b.n	80046f2 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2200      	movs	r2, #0
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	60fa      	str	r2, [r7, #12]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	4a59      	ldr	r2, [pc, #356]	@ (80046e8 <UART_SetConfig+0x2b4>)
 8004584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004588:	b29b      	uxth	r3, r3
 800458a:	2200      	movs	r2, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004598:	f7fb fe6c 	bl	8000274 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	020b      	lsls	r3, r1, #8
 80045ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045b2:	0202      	lsls	r2, r0, #8
 80045b4:	6979      	ldr	r1, [r7, #20]
 80045b6:	6849      	ldr	r1, [r1, #4]
 80045b8:	0849      	lsrs	r1, r1, #1
 80045ba:	2000      	movs	r0, #0
 80045bc:	460c      	mov	r4, r1
 80045be:	4605      	mov	r5, r0
 80045c0:	eb12 0804 	adds.w	r8, r2, r4
 80045c4:	eb43 0905 	adc.w	r9, r3, r5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	469a      	mov	sl, r3
 80045d0:	4693      	mov	fp, r2
 80045d2:	4652      	mov	r2, sl
 80045d4:	465b      	mov	r3, fp
 80045d6:	4640      	mov	r0, r8
 80045d8:	4649      	mov	r1, r9
 80045da:	f7fb fe4b 	bl	8000274 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4613      	mov	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ec:	d308      	bcc.n	8004600 <UART_SetConfig+0x1cc>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f4:	d204      	bcs.n	8004600 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e078      	b.n	80046f2 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004606:	e074      	b.n	80046f2 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004610:	d137      	bne.n	8004682 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004612:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004614:	f7ff f87c 	bl	8003710 <HAL_RCCEx_GetPeriphCLKFreq>
 8004618:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d068      	beq.n	80046f2 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	4a30      	ldr	r2, [pc, #192]	@ (80046e8 <UART_SetConfig+0x2b4>)
 8004626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800462a:	461a      	mov	r2, r3
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004632:	005a      	lsls	r2, r3, #1
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	441a      	add	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d916      	bls.n	800467a <UART_SetConfig+0x246>
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004652:	d212      	bcs.n	800467a <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	b29b      	uxth	r3, r3
 8004658:	f023 030f 	bic.w	r3, r3, #15
 800465c:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	b29a      	uxth	r2, r3
 800466a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800466c:	4313      	orrs	r3, r2
 800466e:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e03b      	b.n	80046f2 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004680:	e037      	b.n	80046f2 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004684:	f7ff f844 	bl	8003710 <HAL_RCCEx_GetPeriphCLKFreq>
 8004688:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d030      	beq.n	80046f2 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	4a14      	ldr	r2, [pc, #80]	@ (80046e8 <UART_SetConfig+0x2b4>)
 8004696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469a:	461a      	mov	r2, r3
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	fbb3 f2f2 	udiv	r2, r3, r2
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d918      	bls.n	80046ec <UART_SetConfig+0x2b8>
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d214      	bcs.n	80046ec <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e011      	b.n	80046f2 <UART_SetConfig+0x2be>
 80046ce:	bf00      	nop
 80046d0:	cfff69f3 	.word	0xcfff69f3
 80046d4:	40042400 	.word	0x40042400
 80046d8:	40013800 	.word	0x40013800
 80046dc:	40004800 	.word	0x40004800
 80046e0:	40004c00 	.word	0x40004c00
 80046e4:	40005000 	.word	0x40005000
 80046e8:	08004eec 	.word	0x08004eec
      }
      else
      {
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800470e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004712:	4618      	mov	r0, r3
 8004714:	3738      	adds	r7, #56	@ 0x38
 8004716:	46bd      	mov	sp, r7
 8004718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800471c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01a      	beq.n	8004832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d10a      	bne.n	8004832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b098      	sub	sp, #96	@ 0x60
 8004864:	af02      	add	r7, sp, #8
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004870:	f7fc fcac 	bl	80011cc <HAL_GetTick>
 8004874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b08      	cmp	r3, #8
 8004882:	d12f      	bne.n	80048e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f88e 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d022      	beq.n	80048e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e063      	b.n	80049ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d149      	bne.n	8004986 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fa:	2200      	movs	r2, #0
 80048fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f857 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03c      	beq.n	8004986 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	623b      	str	r3, [r7, #32]
   return(result);
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
 800492c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e6      	bne.n	800490c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	60fb      	str	r3, [r7, #12]
   return(result);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495e:	61fa      	str	r2, [r7, #28]
 8004960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	69b9      	ldr	r1, [r7, #24]
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	617b      	str	r3, [r7, #20]
   return(result);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e012      	b.n	80049ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3758      	adds	r7, #88	@ 0x58
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c4:	e04f      	b.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049cc:	d04b      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fc fbfd 	bl	80011cc <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e04e      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d037      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b80      	cmp	r3, #128	@ 0x80
 80049fa:	d034      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b40      	cmp	r3, #64	@ 0x40
 8004a00:	d031      	beq.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d110      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2208      	movs	r2, #8
 8004a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f838 	bl	8004a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2208      	movs	r2, #8
 8004a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e029      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a40:	d111      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f81e 	bl	8004a8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e00f      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d0a0      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b095      	sub	sp, #84	@ 0x54
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ab6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e3      	bne.n	8004ac8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d118      	bne.n	8004b3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	613b      	str	r3, [r7, #16]
   return(result);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b4e:	bf00      	nop
 8004b50:	3754      	adds	r7, #84	@ 0x54
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e027      	b.n	8004bc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	@ 0x24
 8004b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e02d      	b.n	8004c40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	@ 0x24
 8004bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f84f 	bl	8004cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e02d      	b.n	8004cbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f811 	bl	8004cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ce4:	e031      	b.n	8004d4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cea:	2308      	movs	r3, #8
 8004cec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	0e5b      	lsrs	r3, r3, #25
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	0f5b      	lsrs	r3, r3, #29
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d0e:	7bbb      	ldrb	r3, [r7, #14]
 8004d10:	7b3a      	ldrb	r2, [r7, #12]
 8004d12:	4911      	ldr	r1, [pc, #68]	@ (8004d58 <UARTEx_SetNbDataToProcess+0x94>)
 8004d14:	5c8a      	ldrb	r2, [r1, r2]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d1a:	7b3a      	ldrb	r2, [r7, #12]
 8004d1c:	490f      	ldr	r1, [pc, #60]	@ (8004d5c <UARTEx_SetNbDataToProcess+0x98>)
 8004d1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	7b7a      	ldrb	r2, [r7, #13]
 8004d30:	4909      	ldr	r1, [pc, #36]	@ (8004d58 <UARTEx_SetNbDataToProcess+0x94>)
 8004d32:	5c8a      	ldrb	r2, [r1, r2]
 8004d34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d38:	7b7a      	ldrb	r2, [r7, #13]
 8004d3a:	4908      	ldr	r1, [pc, #32]	@ (8004d5c <UARTEx_SetNbDataToProcess+0x98>)
 8004d3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	08004f04 	.word	0x08004f04
 8004d5c:	08004f0c 	.word	0x08004f0c

08004d60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d68:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004d6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da8:	e00b      	b.n	8004dc2 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dbc:	e001      	b.n	8004dc2 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	f107 001c 	add.w	r0, r7, #28
 8004dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	f023 0201 	bic.w	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004df4:	2100      	movs	r1, #0
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ffc7 	bl	8004d8a <USB_SetCurrentMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e12:	b004      	add	sp, #16
 8004e14:	4770      	bx	lr

08004e16 <memset>:
 8004e16:	4402      	add	r2, r0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d100      	bne.n	8004e20 <memset+0xa>
 8004e1e:	4770      	bx	lr
 8004e20:	f803 1b01 	strb.w	r1, [r3], #1
 8004e24:	e7f9      	b.n	8004e1a <memset+0x4>
	...

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e60 <__libc_init_array+0x38>)
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	4c0d      	ldr	r4, [pc, #52]	@ (8004e64 <__libc_init_array+0x3c>)
 8004e30:	1b64      	subs	r4, r4, r5
 8004e32:	10a4      	asrs	r4, r4, #2
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4d0b      	ldr	r5, [pc, #44]	@ (8004e68 <__libc_init_array+0x40>)
 8004e3a:	2600      	movs	r6, #0
 8004e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e6c <__libc_init_array+0x44>)
 8004e3e:	f000 f817 	bl	8004e70 <_init>
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	3601      	adds	r6, #1
 8004e52:	4798      	blx	r3
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	4798      	blx	r3
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	08004f1c 	.word	0x08004f1c
 8004e64:	08004f1c 	.word	0x08004f1c
 8004e68:	08004f1c 	.word	0x08004f1c
 8004e6c:	08004f20 	.word	0x08004f20

08004e70 <_init>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr

08004e7c <_fini>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr
